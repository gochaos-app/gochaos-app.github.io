[{"uri":"https://gochaos-app.github.io/language/resources/aws/_index_aws/","title":"AWS Setup","tags":[],"description":"","content":"Go-Chaos uses the AWS SDK, so in order to start executing chaos jobs in your infrastructure AWS credentials need to be setup.\nEnvironment Variables: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY_ID, AWS_SESSION_TOKEN Shared configuration file: files .aws/credentials and .aws/config If Go-Chaos is executed inside an EC2, IAM roles should be used, no need to setup credentials.\nFor manual execution, is recommended to use either an IAM role or shared credentials and for automated execution (GitHub Actions, GitLab CI, Jenkins, etc) is recommended to use IAM roles.\n"},{"uri":"https://gochaos-app.github.io/","title":"Go-Chaos","tags":[],"description":"","content":"Go-Chaos Go-Chaos is a cli app to make chaos engineering simple with experiments as code.\nMain Features Reads chaos engineering experiments in HCL format. Limit blast radius with the help of tags. Both data deletion and server-shutdown perturbation models. Supported Services Go-chaos support the experimentation on the following providers:\nAWS GCP DigitalOcean Kubernetes Go-Chaos workflow write validate destroy Start by creating a directory\nmkdir chaosExperiment \u0026amp;\u0026amp; cd chaosExperiment Create a simple chaos config file and name it experiment.hcl\napp = \u0026#34;ProdApp\u0026#34; description = \u0026#34;this is a chaos engineering experiment\u0026#34; job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:prod-web-server\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 6 } } Execute the experiment:\ngo-chaos d experiment.hcl This last experiment will terminate 6 EC2 instances with the tag Name:prod-web-server in region us-east-1\nContribute Go-Chaos is written in Go, more features (and bugfixes) are in development, if you want a feature or contribute with code, please make a Pull Request.\ngo-chaos experiments This documentation "},{"uri":"https://gochaos-app.github.io/basics/","title":"Overview","tags":[],"description":"","content":"Discover Go-Chaos. "},{"uri":"https://gochaos-app.github.io/language/job_basics/","title":"Usage","tags":[],"description":"","content":"How to control the experiment. go-chaos has different parameters to control the chaos experiments executed in the infrastructure.\nScripts config. script { executor = \u0026#34;bash\u0026#34; source = \u0026#34;destroy.sh\u0026#34; } Only one script is permitted for chaos config file, and the script will always be executed after all jobs have finished\nexecutor: executable file which will execute the script. As long as the local system has the binary it can run any script. source: name of the script, it has to be located in the directory where go-chaos is run. Job config. region: Find resources in specific region, exclusive to cloud providers such as aws, gcp (Optional). project: Find resources in specific project, exclusive to gcp. namespace: Find resources such as pods and deployments in specific namespace, exclusive to kubernetes provider (Optional). Chaos config. tag: Single tag to find resources (for both k8s and cloud providers). chaos: Parameter that performs a specific action on resources found, depends on resource. count: Integer that defines the number of resources to apply the chaos parameter mentioned above. "},{"uri":"https://gochaos-app.github.io/language/resources/aws/autoscaler/","title":"AWS Autoscaler","tags":[],"description":"","content":"Compute Autoscaling job \u0026#34;aws\u0026#34; \u0026#34;ec2_autoscaling\u0026#34; { region = \u0026#34;us-west-2\u0026#34; config { tag = \u0026#34;env:prod\u0026#34; chaos = \u0026#34;addto\u0026#34; count = 6 } } chaos config:\nterminate: Finds autoscaling groups with specified tag and force deletes them. update: Finds a single autoscaling group with specified tag and sets the desired and maximum states to the count parameter, while at the same time the minimum state is configured to 0 desired: Sets the desired capacity, not modifying the other states (minimum and maximum). The desired capacity has to be equal or below the maximum capacity with this chaos action. "},{"uri":"https://gochaos-app.github.io/language/","title":"Configuration language","tags":[],"description":"","content":"go-chaos uses HCL for the configuration language.\nWhy HCL was chosen Unlike other formats, HCL is easily readable by machines and people. It doesn\u0026rsquo;t have such problems with indenting like yaml does. It can be parsed by several languages. Simple config app = \u0026#34;my awesome prod app\u0026#34; description = \u0026#34;This app runs over EC2, experiment consists on terminate 5 instances in us-east-1 region\u0026#34; job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config \u0026#34;chaos\u0026#34; { tag = \u0026#34;Name:app-prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 5 } } go-chaos will look for EC2 instances in the region us-east-1 with the tag Name:app-prod, randomly select 5 and terminate those them.\n"},{"uri":"https://gochaos-app.github.io/basics/introduction/","title":"Introduction","tags":[],"description":"","content":"go-chaos is a chaos engineering tool, that lets you inject chaos in your cloud infrastructure with declarative code while at the same time minimizing the blast radius.\nUse Cases:\nBetter understanding of your own infrastructure. go-chaos can help you to monitor what matters. Increases reliability and resiliancy. Better team collaboration when incidents do happen. Modern software comes with complexity that usually a single team is unable to manage. Tech companies spent time and money on better ways to either remove or trying to minimize complexity, we at go-chaos, understand that complexity is an inherit part of software development, so we embrace it and navigate around it with chaos experiments.\n"},{"uri":"https://gochaos-app.github.io/language/resources/","title":"Resources","tags":[],"description":"","content":"Resources to apply chaos go-chaos can apply chaos over different resources.\nAWS Following AWS resources are available:\nautoscaler\nec2 instances\nLambda functions\nS3 buckets\nGCP Following resources are available for GCP:\nvm Kubernetes pods\ndeployments\ndaemonsets\nDigitalOcean droplets load_balancer "},{"uri":"https://gochaos-app.github.io/language/resources/aws/instance/","title":"AWS EC2 instances","tags":[],"description":"","content":"Compute instances job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-west-1\u0026#34; config { tag = \u0026#34;env:prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 8 } } chaos config:\nterminate: Finds EC2 instances with specified tag and destroys them. reboot: Finds EC2 instances with specified tag and reboots the instances. stop: Stops EC2 instances. "},{"uri":"https://gochaos-app.github.io/go-chaos-cli/","title":"CLI","tags":[],"description":"","content":"go-chaos is a terminal app, so you will need to have basic knowledge on Linux or BSD.\nNAME: go-chaos - A terminal based app that injects chaos into your cloud infrastructure USAGE: go-chaos command [command options] COMMANDS: destroy Execute destroy with custom file name plan Execute a dry run with custom file name validate Validate chaos file target Execute chaos on a single target help, h Shows a list of commands or help for one command Basic commands are:\nvalidate: reads a file and checks if the file is readeable. Finds issues such as missing values for parameters. go-chaos validate myExperiment.hcl plan reads a file and outputs the resources where the chaos operation may take place, this command doesn\u0026rsquo;t actually perform any operation. go-chaos plan myExperiment.hcl destroy: reads a file, validates it and starts to executing chaos job operations, and a script if it is present. The actions behind this command are irreversible, please use with caution\ngo-chaos destroy myExperiment.hcl target: reads a file and executes a target job inside this file, eg, The actions behind this command are irreversible, please use with caution\ngo-chaos target myExperiment.hcl aws.ec2.app1:prod server: reads a server configuration toml file, start a server and can execute chaos experiments from a remote location. Server functionality is still in beta, use with caution\n"},{"uri":"https://gochaos-app.github.io/basics/installation/","title":"Installation","tags":[],"description":"","content":"go-chaos is really simple to install, simply download the binary and place it in the path on your system.\nLatest release\nDownload the compatible binary. Current executable files built are for the\nLinux FreeBSD MacOS Linux x64\nLinux arm64\nFreeBSD x64\nmacos x64\nmacos m1\nAll architectures have versions for both amd64 and arm64\nCompile from source:\ngit clone https://github.com/gochaos-app/go-chaos.git cd go-chaos make prod This will create a binary for your system.\nOnce downloaded or compiled, install by copying the binary to your executables location path\ncp go-chaos /home/${USER}/bin/go-chaos "},{"uri":"https://gochaos-app.github.io/language/notifications/","title":"Notifications","tags":[],"description":"","content":"Resources to apply chaos go-chaos can notify a list of emails about the changes ocurred.\nnotifications \u0026#34;gmail\u0026#34; { from = \u0026#34;my-email@gmail.com\u0026#34; emails = [\u0026#34;manager@gmail.com\u0026#34;, \u0026#34;other-manager@gmail.com\u0026#34;, \u0026#34;team-mate@gmail.com\u0026#34;] body = \u0026#34;Please let\u0026#39;s be attentive on any incident after the chaos experiment located in github.com/my-company/chaos/experiment.hcl\u0026#34; } Note: In order to use a gmail notification, go-chaos requires an environment variable called: GMAIL_APP_TOKEN, for how to setup an App Password in a gmail account, please take a look at the official google documentation. You can setup as many gmail notifications in the same go-chaos experiment.\n"},{"uri":"https://gochaos-app.github.io/language/resources/aws/lambdafn/","title":"AWS Lambda Functions","tags":[],"description":"","content":"Compute Lambda Functions job \u0026#34;aws\u0026#34; \u0026#34;lambda\u0026#34; { region = \u0026#34;us-west-2\u0026#34; config { tag = \u0026#34;tag:example\u0026#34; count = 5 chaos = \u0026#34;stop\u0026#34; } } chaos config:\nterminate: Finds lambda functions with specified tag and force deletes them. stop: Puts reserved concurrency to 0 in found functions. "},{"uri":"https://gochaos-app.github.io/basics/features/","title":"Features","tags":[],"description":"","content":"Control chaos with labels or tags. This is an important feature, as go-chaos requires a single tag to identify the resources to apply the chaos experiment.\ntag = \u0026#34;app:my-super-awesome-app-prod\u0026#34; Execute within a single region Execute a chaos job inside a region, to minimize the blast radius.\nregion = \u0026#34;us-east-1\u0026#34; Apply chaos to a limited number of resource Destroys up to the number of resources specified in the count parameter.\nDifferent chaos executions go-chaos does not only destroy resources, it can perform a number of different operations in the resources, such as reboot, destroy, stop, delete_content, etc.\nThis depends on the resource that chaos is being applied.\nCustom script execution at the end of the chaos experiment. go-chaos can execute a script at the end of the experiment, this lets you create custom alerts, execute custom steps after the chaos experiment, or simple make an announcement that a chaos engineering experiment took place.\nSimple server to start chaos experiments. go-chaos can act as a simple server. When this mode is enabled, go chaos gets its server configuration from file called server.toml\ngo-chaos s server.toml Please see documentation on how to setup the server.\n"},{"uri":"https://gochaos-app.github.io/usage/","title":"Usage","tags":[],"description":"","content":"Usage \u0026amp; Examples The following examples and configuration are for guidance on how to create chaos config files and how to execute those, as well as integration with other languages, notifications and .\naws - Simple example on which instances and a lambda function are stopped and sending a slack message with a bash script. kubernetes A single file that executes chaos for K8s. These and more examples can be found at go-chaos-experiments\n"},{"uri":"https://gochaos-app.github.io/language/resources/aws/s3/","title":"AWS S3","tags":[],"description":"","content":"Storage S3 job \u0026#34;aws\u0026#34; \u0026#34;s3\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config \u0026#34;chaos\u0026#34; { tag = \u0026#34;PREFIX:second\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 2 } } S3 uses PREFIX and SUFFIX to find specific buckets, if bucket name is \u0026ldquo;db-files-inventory-qa\u0026rdquo; you can find this bucket with \u0026ldquo;PREFIX:db\u0026rdquo; or \u0026ldquo;inventory-qa\u0026rdquo;\nchaos config:\nterminate: Finds specified S3 buckets, deletes the content and terminate the buckets. delete_content: Will delete N number ( with count paramenter) of objects in specified buckets. "},{"uri":"https://gochaos-app.github.io/language/resources/k8s/pods/","title":"Kubernetes pods","tags":[],"description":"","content":"Compute pods job \u0026#34;kubernetes\u0026#34; \u0026#34;pod\u0026#34; { namespace = \u0026#34;default\u0026#34; config { tag = \u0026#34;app:nginx\u0026#34; count = 1 chaos = \u0026#34;terminate\u0026#34; } } chaos config:\nterminate: Finds pods with specified label and terminates them, one by one. terminateAll: Terminates entire collection of pods at the same time. Parameter count will be ignored in this operation, unless is 0, which will skip the job. Be careful with this configuration. ^^ terminateAll This needs to change, terminateAll should delete at the same time every pod found not entire collection, deletecolletion was easier to implement, and make count boolean, either 0 or 1, however cannot ignore parameters like that. This can be achieved with either go routines or functions.\n"},{"uri":"https://gochaos-app.github.io/language/resources/k8s/deployment/","title":"Kubernetes deployment","tags":[],"description":"","content":"Compute deployments job \u0026#34;kubernetes\u0026#34; \u0026#34;deployment\u0026#34; { namespace = \u0026#34;nginx\u0026#34; config { tag = \u0026#34;app:nginx\u0026#34; count = 1 chaos = \u0026#34;terminate\u0026#34; } } chaos config:\nterminate: Finds deployments with specified label and terminates them, one by one. update: Finds a single deployment and updates the number of replicas to the count parament. "},{"uri":"https://gochaos-app.github.io/language/resources/k8s/daemonset/","title":"Kubernetes daemonsets","tags":[],"description":"","content":"Compute deployments job \u0026#34;kubernetes\u0026#34; \u0026#34;daemonSet\u0026#34; { namespace = \u0026#34;default\u0026#34; config { tag = \u0026#34;k8s-app:fluentd-logging\u0026#34; count = 1 chaos = \u0026#34;terminate\u0026#34; } } chaos config:\nterminate: Finds daemonSet with specified label and terminates those found. "},{"uri":"https://gochaos-app.github.io/language/resources/digitalocean/droplets/","title":"DigitalOcean Droplets","tags":[],"description":"","content":"Compute Droplets job \u0026#34;do\u0026#34; \u0026#34;droplet\u0026#34; { config { tag = \u0026#34;env:prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 1 } } chaos config:\nterminate: Finds droplets with specified tag and destroys them. reboot: Finds droplets with specified tag and reboots the instances. stop: Tries to shutdown gracefully the found droplets. poweroff: PowerOffs found droplets with tag. "},{"uri":"https://gochaos-app.github.io/language/resources/digitalocean/load_balancer/","title":"DigitalOcean Load Balancer","tags":[],"description":"","content":"Load Balancer job \u0026#34;do\u0026#34; \u0026#34;load_balancer\u0026#34; { config { tag = \u0026#34;app\u0026#34; chaos = \u0026#34;removeDroplets\u0026#34; count = 1 } } chaos config:\nremoveDroplets: Finds a load balancer with tag and removes droplets from it. removeRules: Finds a load balancer with tag and removes rules from it. "},{"uri":"https://gochaos-app.github.io/language/resources/gcp/vms/","title":"GCP VMs instances","tags":[],"description":"","content":"Compute instances job \u0026#34;gcp\u0026#34; \u0026#34;vm\u0026#34; { project = \u0026#34;my-awesome-company-project\u0026#34; region = \u0026#34;us-central1-a\u0026#34; config { tag = \u0026#34;env:prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 8 } } chaos config:\nterminate: Finds compute VM instances with specified tag and destroys them. reset: Finds compute VM instances with specified tag and resets the instances. stop: Stops compute VM instances. "},{"uri":"https://gochaos-app.github.io/usage/aws/","title":"AWS","tags":[],"description":"","content":"Environment In this theoretical environment, the team has the Login service running inside AWS EC2 instances. A lambda function gets called to obtain the device resolution, will apply chaos on that as well.\nExperiment Start by creating a new chaos experiment file called config.hcl copy-paste the following code:\napp = \u0026#34;Login\u0026#34; description = \u0026#34;Chaos Experiment for login app\u0026#34; job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:login-app-prod\u0026#34; chaos = \u0026#34;stop\u0026#34; count = 3 } } Go-chaos will search for 3 aws instances in us-east-1 region with the tag Name:login-app-prod. Required chaos action is to stop the instances\nIn the same file we add another job\njob \u0026#34;aws\u0026#34; \u0026#34;lambda\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:resolution-scale-prod\u0026#34; chaos = \u0026#34;stop\u0026#34; count = 1 } } This job will put concurrency=0 to a single lambda with tag Name:resolution-scale-prod\nThe chaos experiment, can have a single script execution at the end of the jobs execution, in this case a script is used to send a slack message. Create a new file, name it notification.sh, and place it under the same directory as the chaos experiment file.\ncurl -X POST -H \u0026#39;Content-type: application/json\u0026#39; --data \u0026#39;{\u0026#34;text\u0026#34;:\u0026#34;running chaos experiment, please be attentive!\u0026#34;}\u0026#39; \u0026lt;WEBHOOK\u0026gt; Final file should look like this:\napp = \u0026#34;Login\u0026#34; description = \u0026#34;Chaos Experiment for login app\u0026#34; job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:login-app-prod\u0026#34; chaos = \u0026#34;stop\u0026#34; count = 3 } } job \u0026#34;aws\u0026#34; \u0026#34;lambda\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:resolution-scale-prod\u0026#34; chaos = \u0026#34;stop\u0026#34; count = 1 } } script { executor = \u0026#34;bash\u0026#34; source = \u0026#34;notification.sh\u0026#34; } "},{"uri":"https://gochaos-app.github.io/usage/k8s/","title":"K8s","tags":[],"description":"","content":"Environment In the next environment, we have a inventory app that is running on k8s, the hypothesis is that our customers are able to get products with no problem even if our app gets scale down or up.\nExperiment Create a new chaos experiment file called inventory-config.hcl\napp = \u0026#34;inventory app\u0026#34; description = \u0026#34;Chaos Experiment for inventory app, check if customers are able to get products in cart\u0026#34; job \u0026#34;kubernetes\u0026#34; \u0026#34;pod\u0026#34; { namespace = \u0026#34;inventory-app\u0026#34; config { tag = \u0026#34;app:inventory-prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 5 } } The previous job will find 5 pods with label app:inventory-prod and terminate those.\nIn the same experiment, let\u0026rsquo;s check how does the cluster behaves with such rapid changes\njob \u0026#34;kubernetes\u0026#34; \u0026#34;deployment\u0026#34; { namespace = \u0026#34;inventory-app\u0026#34; config { tag = \u0026#34;app:inventory-prod\u0026#34; chaos = \u0026#34;update\u0026#34; count = 20 } } This job will increase to 20 the number of pods of the deployment with label app:inventory-prod\n"},{"uri":"https://gochaos-app.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://gochaos-app.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]