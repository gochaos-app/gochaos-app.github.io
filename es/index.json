[{"uri":"https://gochaos-app.github.io/es/language/resources/aws/_indes/","title":"AWS configuración","tags":[],"description":"","content":"Go-Chaos utiliza el SDK de AWS, por lo que para empezar a ejecutar operaciones de caos en tu infraestructura, se necesitan las credenciales de AWS configuradas.\nVariables de entorno: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY_ID, AWS_SESSION_TOKEN Archivos de configuración compartida: archivos .aws/credentials y .aws/config Si go-chaos se ejecuta dentro de una instancia EC2, deben usarse los roles IAM, por lo que no es necesario configurar las credenciales.\nPara la ejecución manual, se recomienda el uso de roles IAM o credenciales compartidas, mientras que para la ejecución automatizada (GitHub Actions, GitLab CI, Jenkins, etc.) se recomienda el uso de roles IAM.\n"},{"uri":"https://gochaos-app.github.io/es/","title":"Go-Chaos","tags":[],"description":"","content":"Go-Chaos Go-Chaos es una aplicación de línea de comandos (cli) para hacer que la ingeniería del caos sea simple mediante experimentos como código.\nCaracterísticas principales Lee experimentos de ingeniería del caos en formato HCL. Limita el alcance del impacto con la ayuda de etiquetas. Modelos de perturbación tanto de eliminación de datos como de apagado de servidores. Supported Services Go-Chaos admite la experimentación en los siguientes proveedores:\nAWS GCP DigitalOcean Kubernetes Go-Chaos workflow escribir validar planificar destruir Comienza creando un directorio:\nmkdir chaosExperiment \u0026amp;\u0026amp; cd chaosExperiment Crea un archivo de configuración y nombralo experiment.hcl\napp = \u0026#34;ProdApp\u0026#34; description = \u0026#34;experimento de ingenería de caos\u0026#34; job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:prod-web-server\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 6 } } Ejecuta el experimento:\ngo-chaos destroy experiment.hcl Este último experimento terminará 6 instancias de EC2 con la etiqueta Name:prod-web-server en la región us-east-1.\nContribuir Go-Chaos está escrito en Go, se están desarrollando más características (y correcciones de errores), si quieres una característica o contribuir con código, por favor haz un Pull Request..\ngo-chaos experimentos Documentación "},{"uri":"https://gochaos-app.github.io/es/basics/","title":"Descripción General","tags":[],"description":"","content":"Descubre Go-Chaos. "},{"uri":"https://gochaos-app.github.io/es/language/job_basics/","title":"Uso","tags":[],"description":"","content":"Controlar el experimento. go-chaos tiene diferentes parámetros para controlar los experimentos de caos que se ejecutan en la infraestructura.\nScripts config. script { executor = \u0026#34;bash\u0026#34; source = \u0026#34;destroy.sh\u0026#34; } Solo se permite un script por archivos de configuración, y el script se ejecutará al final después de que todos los jobs hayan finalizado.\nexecutor: binario o comando que ejecutará el script. El sistema tiene que tener instalado este binario source: Nombre del script a ejecutar. Job config. region: Enceuntra recursos en una región especifíca, solo para proveedores de la nubes, como aws, gcp (Opcional). project: Encuentra recursos en un proyecto, exclusiva a gcp. namespace: Detectar recursos como pods y deployments en un namespace, exclusivo a kubernetes (Optional). Chaos config. tag: etiqueta para encontrar los recursos (ambos k8s, y provedorees de nube). chaos: Parámetro que realiza una acción específica en los recursos encontrados, dependende del tipo de recurso. count: Número entero que define el número de recursos en los cuales aplicar el parámetro de caos mencionado anteriormente. "},{"uri":"https://gochaos-app.github.io/es/language/resources/aws/autoscaler/","title":"AWS Autoscaler","tags":[],"description":"","content":"Compute Autoscaling job \u0026#34;aws\u0026#34; \u0026#34;ec2_autoscaling\u0026#34; { region = \u0026#34;us-west-2\u0026#34; config { tag = \u0026#34;env:prod\u0026#34; chaos = \u0026#34;update\u0026#34; count = 6 } } chaos config:\nterminate: Encuentra grupos de autoescalamiento con la etiqueta correspondiente y los destruye. update: Encuentra un solo grupo con la etiqueta y configura los parámetros maximo y deseado al numero en el parámetro count, al miemso tiempo el minímo lo configura a 0. desired: Sets the desired capacity, not modifying the other states (minimum and maximum). The desired capacity has to be equal or below the maximum capacity with this chaos action. "},{"uri":"https://gochaos-app.github.io/es/basics/introduction/","title":"Introducción","tags":[],"description":"","content":"go-chaos es una herramienta de ingeniería de caos que permite inyectar caos en tu infraestructura en la nube con código declarativo, al mismo tiempo que minimiza el radio de alcance.\nCasos de uso:\nMejor comprensión de tu propia infraestructura. Go-chaos puede ayudarte a monitorear lo que realmente importa. Aumenta la confiabilidad y la capacidad de recuperación tras un verdadero incidente. Una mejor colaboración en equipo cuando ocurren incidentes. El software moderno viene con una gran complejidad que generalmente un solo equipo no puede manejar. Las compañías de tecnología gastan tiempo y dinero en mejores formas de eliminar o tratar de minimizar la complejidad, nosotros en go-chaos, entendemos que la complejidad es una parte inherente del desarrollo de software, por lo tanto, aceptamos y manejamos con experimentos de caos.\n"},{"uri":"https://gochaos-app.github.io/es/language/","title":"Lenguaje de configuración","tags":[],"description":"","content":"go-chaos usa HCL como lenguaje de configuración.\n¿Por qué se eligió HCL? A diferencia de otros formatos, HCL es fácilmente legible tanto por máquinas como por personas No tiene problemas con la indentación como lo tiene YAML. Puede ser leido por otros lenguajes. Configuración simple app = \u0026#34;my awesome prod app\u0026#34; description = \u0026#34;Esta aplicación se ejecuta en EC2, el experimento consiste en terminar 5 instancias en la región us-east-1\u0026#34; job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config \u0026#34;chaos\u0026#34; { tag = \u0026#34;Name:app-prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 5 } } go-chaos buscará instancias EC2 en la región us-east-1 con la etiquetaName:app-prod, aleatoriamente seleccionará 5 y las va a terminar.\n"},{"uri":"https://gochaos-app.github.io/es/language/resources/","title":"Resources","tags":[],"description":"","content":"Resources to apply chaos go-chaos can apply chaos over different resources.\nAWS Following AWS resources are available:\nautoscaler\nec2 instances\nLambda functions\nS3 buckets\nGCP Following resources are available for GCP:\nvm Kubernetes pods\ndeployments\ndaemonsets\nDigitalOcean droplets load_balancer "},{"uri":"https://gochaos-app.github.io/es/language/resources/aws/instance/","title":"AWS EC2 instances","tags":[],"description":"","content":"Compute instances job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-west-1\u0026#34; config { tag = \u0026#34;env:prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 8 } } chaos config:\nterminate: Encuentra instancias EC2 y las destruye. reboot: Reinicia instancias EC2. stop: Para instancias EC2. "},{"uri":"https://gochaos-app.github.io/es/go-chaos-cli/","title":"CLI","tags":[],"description":"","content":"go-chaos es una aplicación de terminal, por lo que necesitarás tener conocimientos básicos de Linux o BSD.\nNAME: go-chaos - Una aplicación basada en terminal que inyecta caos en tu infraestructura en la nube USAGE: go-chaos command [command options] COMMANDS: destroy Ejecuta destroy con un archivo plan Ejecuta una simulación con un nombre de archivo personalizado validate Valida el experimento target Ejecuta caos en un solo objetivo help, h Muestra una lista de comandos Los comandos básicos son:\nvalidate: Lee un archivo y verifica si es legible. Encuentra problemas como valores faltantes en el archivo. go-chaos validate Experimento.hcl plan: Lee un archivo y muestra los recursos donde puede tener lugar las operaciones, este comando no realiza ninguna operación real. go-chaos plan Experimento.hcl destroy: Lee un archivo, lo valida y comienza a ejecutar las operaciones de caos. Las acciones detrás de este comando son irreversibles, por favor, úsalo con precaución.\ngo-chaos destroy Experimento.hcl target: Lee un archivo y ejecuta un trabajo de objetivo dentro de este archivo. Las acciones detrás de este comando son irreversibles, por favor, úsalo con precaución.\ngo-chaos target myExperiment.hcl aws.ec2.app1:prod "},{"uri":"https://gochaos-app.github.io/es/basics/installation/","title":"Instalación","tags":[],"description":"","content":"go-chaos es muy fácil de instalar, simplemente descarga el binario y colócalo en la ruta de tu sistema.\nUltima Versión\nDescarga el binario compatible. Los archivos ejecutables se construyen para las siguientes arquitecturas:\nLinux FreeBSD MacOS Linux x64\nLinux arm64\nFreeBSD x64\nmacos x64\nmacos m1\nTodas las arquitecturas tienen versiones tanto para amd64 como para arm64.\nCompila desde el código fuente:\ngit clone https://github.com/gochaos-app/go-chaos.git cd go-chaos make install Esto creará un binario para tu sistema y lo colocará dentro de ${HOME}/bin, por favor asegúrate de que este directorio exista y se encuentre en la ruta del sistema.\nSi la opción anterior no está disponible en tu sistema, usa:\nmake prod para compilar el código. Una vez compilado, instálalo copiando el binario a la ruta de ubicación de tus ejecutables:\ncp go-chaos /usr/local/bin/go-chaos "},{"uri":"https://gochaos-app.github.io/es/language/notifications/","title":"Notificaciones","tags":[],"description":"","content":"Notificaciones gmail go-chaos puede notificar a una lista de correos electrónicos sobre los cambios ocurridos.\nnotifications \u0026#34;gmail\u0026#34; { from = \u0026#34;my-email@gmail.com\u0026#34; to = [\u0026#34;manager@gmail.com\u0026#34;, \u0026#34;other-manager@gmail.com\u0026#34;, \u0026#34;team-mate@gmail.com\u0026#34;] body = \u0026#34;Por favor,atentos a cualquier incidente después del experimento en github.com/mi-empresa/chaos/experiment.hcl\u0026#34; } Nota: Para usar una notificación de Gmail, go-chaos requiere una variable de entorno llamada: GMAIL_APP_TOKEN. Para obtener información sobre cómo configurar una contraseña de aplicación en una cuenta de Gmail, consulte la documentación oficial de Google. Puede configurar tantas notificaciones de Gmail en el mismo experimento de go-chaos.\nslack go-chaos puede notificar a una lista de canales de Slack sobre los cambios ocurridos.\nnotifications \u0026#34;slack\u0026#34; { to = [\u0026#34;C04N5HS91MZ\u0026#34;, \u0026#34;C04NJH791MU\u0026#34;] body = \u0026#34;Experimento de caos en ejecución,atento equipo de desarrollo.\u0026#34; } Nota: Para usar la notificación de Slack, go-chaos requiere una variable de entorno llamada: SLACK_AUTH_TOKEN, consulte la documentación oficial de Slack sobre cómo crear una aplicación de Slack y cómo crear un token de aplicación de Slack.\nNota: Requiere IDs de canal en lugar de nombres de canal de Slack, esto cambiará en un futuro cercano.\n"},{"uri":"https://gochaos-app.github.io/es/language/resources/aws/lambdafn/","title":"AWS Lambda Functions","tags":[],"description":"","content":"Compute Lambda Functions job \u0026#34;aws\u0026#34; \u0026#34;lambda\u0026#34; { region = \u0026#34;us-west-2\u0026#34; config { tag = \u0026#34;tag:example\u0026#34; count = 5 chaos = \u0026#34;stop\u0026#34; } } chaos config:\nterminate: Finds lambda functions with specified tag and force deletes them. stop: Puts reserved concurrency to 0 in found functions. "},{"uri":"https://gochaos-app.github.io/es/basics/features/","title":"Características","tags":[],"description":"","content":"Controla el caos con etiquetas. Esta es una característica importante, ya que go-chaos requiere una sola etiqueta para identificar los recursos en los que se aplicará el experimento de caos.\ntag = \u0026#34;app:my-super-aplicación-prod\u0026#34; Ejecución en una única región. Ejecuta un trabajo de caos dentro de una región para minimizar el radio de acción.\nregion = \u0026#34;us-east-1\u0026#34; Aplicar el caos a un número limitado de recursos. Destruye el número de recursos especificados con el parámetro \u0026ldquo;count\u0026rdquo;.\nEjecuciones de caos diferentes. go-chaos no solo destruye recursos, sino que puede realizar una serie de operaciones diferentes en los recursos, como reiniciar, destruir, detener, eliminar contenido, etc.\nEsto depende del recurso al que se esté aplicando el caos.\nEjecución de scripts al final del experimento. go-chaos puede ejecutar un script al final del experimento, lo que le permite crear alertas personalizadas, ejecutar pasos personalizados después del experimento de caos o simplemente notificar de que se ha realizado un experimento de ingeniería de caos.\n"},{"uri":"https://gochaos-app.github.io/es/usage/","title":"Usage","tags":[],"description":"","content":"Usage \u0026amp; Examples Los siguientes ejemplos y configuraciones sirven como guía para crear archivos de configuración de caos y cómo ejecutarlos, así como para integrar con otros lenguajes, notificaciones, etc.\naws - Un ejemplo sencillo en el que se detienen instancias y una función lambda en AWS y se envía un mensaje de Slack con un script de bash. kubernetes Un archivo único que ejecuta el caos en Kubernetes. GithubActions Un archivo de GitHub Actions que configura go-chaos y ejecuta experimentos. Estos y más ejemplos se pueden encontrar en go-chaos-experiments\n"},{"uri":"https://gochaos-app.github.io/es/language/resources/aws/s3/","title":"AWS S3","tags":[],"description":"","content":"Storage S3 job \u0026#34;aws\u0026#34; \u0026#34;s3\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config \u0026#34;chaos\u0026#34; { tag = \u0026#34;PREFIX:second\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 2 } } S3 uses PREFIX and SUFFIX to find specific buckets, if bucket name is \u0026ldquo;db-files-inventory-qa\u0026rdquo; you can find this bucket with \u0026ldquo;PREFIX:db\u0026rdquo; or \u0026ldquo;inventory-qa\u0026rdquo;\nchaos config:\nterminate: Finds specified S3 buckets, deletes the content and terminate the buckets. delete_content: Will delete N number ( with count parameter) of objects in specified buckets. "},{"uri":"https://gochaos-app.github.io/es/language/resources/k8s/pods/","title":"Kubernetes pods","tags":[],"description":"","content":"Compute pods job \u0026#34;kubernetes\u0026#34; \u0026#34;pod\u0026#34; { namespace = \u0026#34;default\u0026#34; config { tag = \u0026#34;app:nginx\u0026#34; count = 1 chaos = \u0026#34;terminate\u0026#34; } } chaos config:\nterminate: Finds pods with specified label and terminates them, one by one. terminateAll: Terminates entire collection of pods at the same time. Parameter count will be ignored in this operation, unless is 0, which will skip the job. Be careful with this configuration. ^^ terminateAll This needs to change, terminateAll should delete at the same time every pod found not entire collection, deletecolletion was easier to implement, and make count boolean, either 0 or 1, however cannot ignore parameters like that. This can be achieved with either go routines or functions.\n"},{"uri":"https://gochaos-app.github.io/es/language/resources/k8s/deployment/","title":"Kubernetes deployment","tags":[],"description":"","content":"Compute deployments job \u0026#34;kubernetes\u0026#34; \u0026#34;deployment\u0026#34; { namespace = \u0026#34;nginx\u0026#34; config { tag = \u0026#34;app:nginx\u0026#34; count = 1 chaos = \u0026#34;terminate\u0026#34; } } chaos config:\nterminate: Finds deployments with specified label and terminates them, one by one. update: Finds a single deployment and updates the number of replicas to the count parament. "},{"uri":"https://gochaos-app.github.io/es/language/resources/k8s/daemonset/","title":"Kubernetes daemonsets","tags":[],"description":"","content":"Compute deployments job \u0026#34;kubernetes\u0026#34; \u0026#34;daemonSet\u0026#34; { namespace = \u0026#34;default\u0026#34; config { tag = \u0026#34;k8s-app:fluentd-logging\u0026#34; count = 1 chaos = \u0026#34;terminate\u0026#34; } } chaos config:\nterminate: Finds daemonSet with specified label and terminates those found. "},{"uri":"https://gochaos-app.github.io/es/language/resources/digitalocean/","title":"Configuración DigitalOcean","tags":[],"description":"","content":"go-chaos utiliza el SDK de DigitalOcean, así que para empezar a ejecutar trabajos de caos en su infraestructura, se debe configurar un token de DO como variable de entorno.\nVariables de entorno: DIGITALOCEAN_TOKEN. "},{"uri":"https://gochaos-app.github.io/es/language/resources/digitalocean/droplets/","title":"DigitalOcean Droplets","tags":[],"description":"","content":"Compute Droplets job \u0026#34;do\u0026#34; \u0026#34;droplet\u0026#34; { config { tag = \u0026#34;env:prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 1 } } chaos config:\nterminate: Finds droplets with specified tag and destroys them. reboot: Finds droplets with specified tag and reboots the instances. stop: Tries to shutdown gracefully the found droplets. poweroff: PowerOffs found droplets with tag. "},{"uri":"https://gochaos-app.github.io/es/language/resources/digitalocean/load_balancer/","title":"DigitalOcean Load Balancer","tags":[],"description":"","content":"Load Balancer job \u0026#34;do\u0026#34; \u0026#34;load_balancer\u0026#34; { config { tag = \u0026#34;app\u0026#34; chaos = \u0026#34;removeDroplets\u0026#34; count = 1 } } chaos config:\nremoveDroplets: Finds a load balancer with tag and removes droplets from it. removeRules: Finds a load balancer with tag and removes rules from it. "},{"uri":"https://gochaos-app.github.io/es/language/resources/gcp/","title":"GCP Setup","tags":[],"description":"","content":"In order to execute GCP chaos, the credentials for gcloud, needs to be setup. Setup gcloud in your environment and login with your credentials, once this is setup, go chaos is ready to execute chaos experiments.\n"},{"uri":"https://gochaos-app.github.io/es/language/resources/k8s/","title":"K8s Setup","tags":[],"description":"","content":"For k8s, kubeconfig file needs to be located at ${HOME}/.kube/config.\n"},{"uri":"https://gochaos-app.github.io/es/language/resources/gcp/vms/","title":"GCP VMs instances","tags":[],"description":"","content":"Compute instances job \u0026#34;gcp\u0026#34; \u0026#34;vm\u0026#34; { project = \u0026#34;my-awesome-company-project\u0026#34; region = \u0026#34;us-central1-a\u0026#34; config { tag = \u0026#34;env:prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 8 } } chaos config:\nterminate: Finds compute VM instances with specified tag and destroys them. reset: Finds compute VM instances with specified tag and resets the instances. stop: Stops compute VM instances. "},{"uri":"https://gochaos-app.github.io/es/usage/aws/","title":"AWS","tags":[],"description":"","content":"Situación En esta situación teórica, se tiene el servicio de inicio de sesión (Login) ejecutándose dentro de instancias AWS EC2. Se llama a una función lambda para obtener la resolución del dispositivo, en la cual se aplicará caos también.\nExperiment Start by creating a new chaos experiment file called config.hcl copy-paste the following code:\napp = \u0026#34;Login\u0026#34; description = \u0026#34;Experimento de caos para la aplicación de inicio de sesión\u0026#34; job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:login-app-prod\u0026#34; chaos = \u0026#34;stop\u0026#34; count = 3 } } go-chaos buscará 3 instancias de AWS en la región us-east-1 con la etiqueta Name:login-app-prod. La acción de caos requerida es detener (stop) las instancias.\nEn el mismo archivo agregamos otro trabajo:\nIn the same file we add another job\njob \u0026#34;aws\u0026#34; \u0026#34;lambda\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:resolution-scale-prod\u0026#34; chaos = \u0026#34;stop\u0026#34; count = 1 } } Este trabajo establecerá la concurrencia en 0 de una sola función lambda con la etiqueta Name:resolution-scale-prod.\nEl experimento de caos puede tener una única ejecución de script al final de la ejecución de los trabajos, en este caso se utiliza un script para enviar un mensaje de Slack. Cree un nuevo archivo y llámelo notification.sh, y colóquelo en el mismo directorio que el archivo de experimento de caos.\ncurl -X POST -H \u0026#39;Content-type: application/json\u0026#39; --data \u0026#39;{\u0026#34;text\u0026#34;:\u0026#34;running chaos experiment, please be attentive!\u0026#34;}\u0026#39; \u0026lt;WEBHOOK\u0026gt; El archivo final debería verse así:\napp = \u0026#34;Login\u0026#34; description = \u0026#34;Experimento de caos para la aplicación de inicio de sesión\u0026#34; job \u0026#34;aws\u0026#34; \u0026#34;ec2\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:login-app-prod\u0026#34; chaos = \u0026#34;stop\u0026#34; count = 3 } } job \u0026#34;aws\u0026#34; \u0026#34;lambda\u0026#34; { region = \u0026#34;us-east-1\u0026#34; config { tag = \u0026#34;Name:resolution-scale-prod\u0026#34; chaos = \u0026#34;stop\u0026#34; count = 1 } } script { executor = \u0026#34;bash\u0026#34; source = \u0026#34;notification.sh\u0026#34; } "},{"uri":"https://gochaos-app.github.io/es/usage/k8s/","title":"K8s","tags":[],"description":"","content":"Situación En el siguiente entorno, tenemos una aplicación de inventario que se ejecuta en k8s, la hipótesis es que nuestros clientes puedan obtener productos sin problema incluso si nuestra aplicación se escala hacia abajo o hacia arriba.\nExperimento Cree un nuevo archivo de experimento de caos llamado inventory-config.hcl.\napp = \u0026#34;inventory app\u0026#34; description = \u0026#34;Experimento de caos para la aplicación de inventario, verificar si los clientes pueden agregar productos en el carrito\u0026#34; job \u0026#34;kubernetes\u0026#34; \u0026#34;pod\u0026#34; { namespace = \u0026#34;inventory-app\u0026#34; config { tag = \u0026#34;app:inventory-prod\u0026#34; chaos = \u0026#34;terminate\u0026#34; count = 5 } } El trabajo anterior buscará 5 pods con la etiqueta app:inventory-prod y los eliminará.\nEn el mismo experimento, verificamos cómo se comporta el clúster con cambios tan rápidos.\njob \u0026#34;kubernetes\u0026#34; \u0026#34;deployment\u0026#34; { namespace = \u0026#34;inventory-app\u0026#34; config { tag = \u0026#34;app:inventory-prod\u0026#34; chaos = \u0026#34;update\u0026#34; count = 20 } } Este trabajo aumentará a 20 el número de pods del deployment con la etiqueta app:inventory-prod.\n"},{"uri":"https://gochaos-app.github.io/es/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://gochaos-app.github.io/es/tags/","title":"Tags","tags":[],"description":"","content":""}]