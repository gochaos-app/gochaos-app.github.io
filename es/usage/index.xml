<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage on Documentation for Hugo Learn Theme</title><link>https://gochaos-app.github.io/es/usage/</link><description>Recent content in Usage on Documentation for Hugo Learn Theme</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 09 Apr 2016 16:50:16 +0200</lastBuildDate><atom:link href="https://gochaos-app.github.io/es/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS</title><link>https://gochaos-app.github.io/es/usage/aws/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/usage/aws/</guid><description>Situación En esta situación teórica, se tiene el servicio de inicio de sesión (Login) ejecutándose dentro de instancias AWS EC2. Se llama a una función lambda para obtener la resolución del dispositivo, en la cual se aplicará caos también.
Experimento Start by creating a new chaos experiment file called config.hcl copy-paste the following code:
app = &amp;#34;Login&amp;#34; description = &amp;#34;Experimento de caos para la aplicación de inicio de sesión&amp;#34; job &amp;#34;aws&amp;#34; &amp;#34;ec2&amp;#34; { region = &amp;#34;us-east-1&amp;#34; config { tag = &amp;#34;Name:login-app-prod&amp;#34; chaos = &amp;#34;stop&amp;#34; count = 3 } } go-chaos buscará 3 instancias de AWS en la región us-east-1 con la etiqueta Name:login-app-prod.</description></item><item><title>K8s</title><link>https://gochaos-app.github.io/es/usage/k8s/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/usage/k8s/</guid><description>Situación En el siguiente entorno, tenemos una aplicación de inventario que se ejecuta en k8s, la hipótesis es que nuestros clientes puedan obtener productos sin problema incluso si nuestra aplicación se escala hacia abajo o hacia arriba.
Experimento Cree un nuevo archivo de experimento de caos llamado inventory-config.hcl.
app = &amp;#34;inventory app&amp;#34; description = &amp;#34;Experimento de caos para la aplicación de inventario, verificar si los clientes pueden agregar productos en el carrito&amp;#34; job &amp;#34;kubernetes&amp;#34; &amp;#34;pod&amp;#34; { namespace = &amp;#34;inventory-app&amp;#34; config { tag = &amp;#34;app:inventory-prod&amp;#34; chaos = &amp;#34;terminate&amp;#34; count = 5 } } El trabajo anterior buscará 5 pods con la etiqueta app:inventory-prod y los eliminará.</description></item></channel></rss>