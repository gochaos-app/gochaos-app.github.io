<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go-Chaos on Documentation for Hugo Learn Theme</title><link>https://gochaos-app.github.io/es/</link><description>Recent content in Go-Chaos on Documentation for Hugo Learn Theme</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 09 Apr 2016 16:50:16 +0200</lastBuildDate><atom:link href="https://gochaos-app.github.io/es/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS configuración</title><link>https://gochaos-app.github.io/es/language/resources/aws/_indes/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/aws/_indes/</guid><description>Go-Chaos utiliza el SDK de AWS, por lo que para empezar a ejecutar operaciones de caos en tu infraestructura, se necesitan las credenciales de AWS configuradas.
Variables de entorno: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY_ID, AWS_SESSION_TOKEN Archivos de configuración compartida: archivos .aws/credentials y .aws/config Si go-chaos se ejecuta dentro de una instancia EC2, deben usarse los roles IAM, por lo que no es necesario configurar las credenciales.
Para la ejecución manual, se recomienda el uso de roles IAM o credenciales compartidas, mientras que para la ejecución automatizada (GitHub Actions, GitLab CI, Jenkins, etc.</description></item><item><title>AWS Autoscaler</title><link>https://gochaos-app.github.io/es/language/resources/aws/autoscaler/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/aws/autoscaler/</guid><description>Compute Autoscaling job &amp;#34;aws&amp;#34; &amp;#34;ec2_autoscaling&amp;#34; { region = &amp;#34;us-west-2&amp;#34; config { tag = &amp;#34;env:prod&amp;#34; chaos = &amp;#34;update&amp;#34; count = 6 } } chaos config:
terminate: Encuentra grupos de autoescalamiento con la etiqueta correspondiente y los destruye. update: Encuentra un solo grupo con la etiqueta y configura los parámetros maximo y deseado al numero en el parámetro count, al miemso tiempo el minímo lo configura a 0. desired: Sets the desired capacity, not modifying the other states (minimum and maximum).</description></item><item><title>AWS EC2 instances</title><link>https://gochaos-app.github.io/es/language/resources/aws/instance/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/aws/instance/</guid><description>Compute instances job &amp;#34;aws&amp;#34; &amp;#34;ec2&amp;#34; { region = &amp;#34;us-west-1&amp;#34; config { tag = &amp;#34;env:prod&amp;#34; chaos = &amp;#34;terminate&amp;#34; count = 8 } } chaos config:
terminate: Encuentra instancias EC2 y las destruye. reboot: Reinicia instancias EC2. stop: Para instancias EC2.</description></item><item><title>AWS Lambda Functions</title><link>https://gochaos-app.github.io/es/language/resources/aws/lambdafn/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/aws/lambdafn/</guid><description>Compute Lambda Functions job &amp;#34;aws&amp;#34; &amp;#34;lambda&amp;#34; { region = &amp;#34;us-west-2&amp;#34; config { tag = &amp;#34;tag:example&amp;#34; count = 5 chaos = &amp;#34;stop&amp;#34; } } chaos config:
terminate: Finds lambda functions with specified tag and force deletes them. stop: Puts reserved concurrency to 0 in found functions.</description></item><item><title>AWS S3</title><link>https://gochaos-app.github.io/es/language/resources/aws/s3/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/aws/s3/</guid><description>Storage S3 job &amp;#34;aws&amp;#34; &amp;#34;s3&amp;#34; { region = &amp;#34;us-east-1&amp;#34; config &amp;#34;chaos&amp;#34; { tag = &amp;#34;PREFIX:second&amp;#34; chaos = &amp;#34;terminate&amp;#34; count = 2 } } S3 uses PREFIX and SUFFIX to find specific buckets, if bucket name is &amp;ldquo;db-files-inventory-qa&amp;rdquo; you can find this bucket with &amp;ldquo;PREFIX:db&amp;rdquo; or &amp;ldquo;inventory-qa&amp;rdquo;
chaos config:
terminate: Finds specified S3 buckets, deletes the content and terminate the buckets. delete_content: Will delete N number ( with count parameter) of objects in specified buckets.</description></item><item><title>Kubernetes pods</title><link>https://gochaos-app.github.io/es/language/resources/k8s/pods/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/k8s/pods/</guid><description>Compute pods job &amp;#34;kubernetes&amp;#34; &amp;#34;pod&amp;#34; { namespace = &amp;#34;default&amp;#34; config { tag = &amp;#34;app:nginx&amp;#34; count = 1 chaos = &amp;#34;terminate&amp;#34; } } chaos config:
terminate: Finds pods with specified label and terminates them, one by one. terminateAll: Terminates entire collection of pods at the same time. Parameter count will be ignored in this operation, unless is 0, which will skip the job. Be careful with this configuration. ^^ terminateAll This needs to change, terminateAll should delete at the same time every pod found not entire collection, deletecolletion was easier to implement, and make count boolean, either 0 or 1, however cannot ignore parameters like that.</description></item><item><title>Kubernetes deployment</title><link>https://gochaos-app.github.io/es/language/resources/k8s/deployment/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/k8s/deployment/</guid><description>Compute deployments job &amp;#34;kubernetes&amp;#34; &amp;#34;deployment&amp;#34; { namespace = &amp;#34;nginx&amp;#34; config { tag = &amp;#34;app:nginx&amp;#34; count = 1 chaos = &amp;#34;terminate&amp;#34; } } chaos config:
terminate: Finds deployments with specified label and terminates them, one by one. update: Finds a single deployment and updates the number of replicas to the count parament.</description></item><item><title>Kubernetes daemonsets</title><link>https://gochaos-app.github.io/es/language/resources/k8s/daemonset/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/k8s/daemonset/</guid><description>Compute deployments job &amp;#34;kubernetes&amp;#34; &amp;#34;daemonSet&amp;#34; { namespace = &amp;#34;default&amp;#34; config { tag = &amp;#34;k8s-app:fluentd-logging&amp;#34; count = 1 chaos = &amp;#34;terminate&amp;#34; } } chaos config:
terminate: Finds daemonSet with specified label and terminates those found.</description></item><item><title>DigitalOcean Droplets</title><link>https://gochaos-app.github.io/es/language/resources/digitalocean/droplets/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/digitalocean/droplets/</guid><description>Compute Droplets job &amp;#34;do&amp;#34; &amp;#34;droplet&amp;#34; { config { tag = &amp;#34;env:prod&amp;#34; chaos = &amp;#34;terminate&amp;#34; count = 1 } } chaos config:
terminate: Finds droplets with specified tag and destroys them. reboot: Finds droplets with specified tag and reboots the instances. stop: Tries to shutdown gracefully the found droplets. poweroff: PowerOffs found droplets with tag.</description></item><item><title>DigitalOcean Load Balancer</title><link>https://gochaos-app.github.io/es/language/resources/digitalocean/load_balancer/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/digitalocean/load_balancer/</guid><description>Load Balancer job &amp;#34;do&amp;#34; &amp;#34;load_balancer&amp;#34; { config { tag = &amp;#34;app&amp;#34; chaos = &amp;#34;removeDroplets&amp;#34; count = 1 } } chaos config:
removeDroplets: Finds a load balancer with tag and removes droplets from it. removeRules: Finds a load balancer with tag and removes rules from it.</description></item><item><title>GCP VMs instances</title><link>https://gochaos-app.github.io/es/language/resources/gcp/vms/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/language/resources/gcp/vms/</guid><description>Compute instances job &amp;#34;gcp&amp;#34; &amp;#34;vm&amp;#34; { project = &amp;#34;my-awesome-company-project&amp;#34; region = &amp;#34;us-central1-a&amp;#34; config { tag = &amp;#34;env:prod&amp;#34; chaos = &amp;#34;terminate&amp;#34; count = 8 } } chaos config:
terminate: Finds compute VM instances with specified tag and destroys them. reset: Finds compute VM instances with specified tag and resets the instances. stop: Stops compute VM instances.</description></item><item><title>AWS</title><link>https://gochaos-app.github.io/es/usage/aws/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/usage/aws/</guid><description>Situación En esta situación teórica, se tiene el servicio de inicio de sesión (Login) ejecutándose dentro de instancias AWS EC2. Se llama a una función lambda para obtener la resolución del dispositivo, en la cual se aplicará caos también.
Experiment Start by creating a new chaos experiment file called config.hcl copy-paste the following code:
app = &amp;#34;Login&amp;#34; description = &amp;#34;Experimento de caos para la aplicación de inicio de sesión&amp;#34; job &amp;#34;aws&amp;#34; &amp;#34;ec2&amp;#34; { region = &amp;#34;us-east-1&amp;#34; config { tag = &amp;#34;Name:login-app-prod&amp;#34; chaos = &amp;#34;stop&amp;#34; count = 3 } } go-chaos buscará 3 instancias de AWS en la región us-east-1 con la etiqueta Name:login-app-prod.</description></item><item><title>K8s</title><link>https://gochaos-app.github.io/es/usage/k8s/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://gochaos-app.github.io/es/usage/k8s/</guid><description>Situación En el siguiente entorno, tenemos una aplicación de inventario que se ejecuta en k8s, la hipótesis es que nuestros clientes puedan obtener productos sin problema incluso si nuestra aplicación se escala hacia abajo o hacia arriba.
Experimento Cree un nuevo archivo de experimento de caos llamado inventory-config.hcl.
app = &amp;#34;inventory app&amp;#34; description = &amp;#34;Experimento de caos para la aplicación de inventario, verificar si los clientes pueden agregar productos en el carrito&amp;#34; job &amp;#34;kubernetes&amp;#34; &amp;#34;pod&amp;#34; { namespace = &amp;#34;inventory-app&amp;#34; config { tag = &amp;#34;app:inventory-prod&amp;#34; chaos = &amp;#34;terminate&amp;#34; count = 5 } } El trabajo anterior buscará 5 pods con la etiqueta app:inventory-prod y los eliminará.</description></item></channel></rss>